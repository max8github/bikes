akka {
  actor {
    serializers {
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }
    debug {
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on
      autoreceive = on
      event-stream = on
    }
    provider = cluster
    allow-java-serialization = off
    warn-about-java-serializer-usage = on
    serialization-bindings {
      "akka.sample.bikes.CborSerializable" = jackson-cbor
    }
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  cluster {
    sharding {
      number-of-shards = 15
      remember-entities = on
      rebalance-interval = 10s

      least-shard-allocation-strategy {
        rebalance-threshold = 1
        max-simultaneous-rebalance = 3
      }
    }
  }
  management {
    health-checks {
      readiness-checks {

        # Default health check for cluster. Overwrite the setting to replace it with
        # your implementation or set it to "" (empty string) to disable this check.
        cluster-membership = "akka.management.cluster.scaladsl.ClusterMembershipCheck"
      }
    }
    http {
      # environmental variable HOST is set by Kubernetes: it resolves to the pod IP
      hostname = ${?HOST}
      # Use port 8558 by default, but use environment variable PORT_8558 if it is defined
      port = 8558
      port = ${?PORT_8558}
      bind-hostname = 0.0.0.0
      bind-port = 8558
    }
  }
//  http {
//    client {
//      idle-timeout = 120 s
//    }
//
//    host-connection-pool {
//      idle-timeout = 150 s
//    }
//  }
}

bikes {
  routes.ask-timeout = 10s
  //timeout for an fsm that receives no messages in a long time (idle)
  receive-timeout = 360s
  //the fsm should eventually reach its final state of Yielded or Reserved in a reasonable time, else it should time out.
  fsm-timeout = 80s
  httpHost = localhost
  httpPort = 8084
}