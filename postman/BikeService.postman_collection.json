{
	"info": {
		"_postman_id": "d45e4c90-24ae-4690-a361-b0ac4075f1e2",
		"name": "BikeService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function create_UUID(){",
							"    var dt = new Date().getTime();",
							"    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
							"        var r = (dt + Math.random()*16)%16 | 0;",
							"        dt = Math.floor(dt/16);",
							"        return (c=='x' ? r :(r&0x3|0x8)).toString(16);",
							"    });",
							"    uuid = uuid.substring(0, 8);",
							"    return uuid;",
							"}",
							"",
							"var version_uuid = create_UUID();",
							"postman.setEnvironmentVariable(\"version_uuid\", version_uuid);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"bikeId\", pm.response.text());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"instructions\": {\"version\":\"{{version_uuid}}\", \"location\":\"git@github.com:blueprints/myblueprint.git\"}, \"bom\":{\"version\":\"\", \"location\":\"\"}, \"mechanic\": {\"version\":\"\", \"location\":\"\"}, \"access\":\"\"}"
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike"
					]
				}
			},
			"response": []
		},
		{
			"name": "Restart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"instructions\": {\"version\":\"{{version_uuid}}\", \"location\":\"git@github.com:blueprints/myblueprint.git\"}, \"bom\":{\"version\":\"\", \"location\":\"\"}, \"mechanic\": {\"version\":\"\", \"location\":\"\"}, \"access\":\"\"}"
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike"
					]
				},
				"description": "This is to kick an entity actor that got stuck in its initial state. It is like a regular 'Create new', a POST: it needs a blueprint payload."
			},
			"response": []
		},
		{
			"name": "Get Inventory",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"if(jsonData.entities.length > 0) {",
							"    // pm.environment.set(\"bikeId\", jsonData.entities[0].id);",
							"    pm.environment.set(\"version_uuid\", jsonData.entities[0].id);",
							"}",
							"",
							"//visualizer",
							"var template = `",
							"    <style type=\"text/css\">",
							"        .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"        .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"        .tftable tr {background-color:#ffffff;}",
							"        .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"        .tftable tr:hover {background-color:#e0ffff;}",
							"    </style>",
							"",
							"    <table id=\"tblData\" class=\"tftable\" border=\"1\">",
							"        <tr>",
							"            <th>entity id</th>",
							"            <th>state</th>",
							"        </tr>",
							"        ",
							"        {{#each response.entities}}",
							"            <tr id=row_{{@key}} onClick=\"handleClick(this.id)\">",
							"                <td id={{@key}}>{{id}}</td>",
							"                <td style=\"color:#0000ff\" bgColor=\"{{_colorCode}}\">{{state}}</td>",
							"            </tr>",
							"        {{/each}}",
							"    </table>",
							"`;",
							"",
							"function circleColor(d) {",
							"    switch(d) {",
							"        case 'InitState':",
							"        return 'grey';",
							"        break;",
							"        case 'DownloadingState':",
							"        return '#b091ff';   //violet",
							"        break;",
							"        case 'DownloadedState':",
							"        return '#84c2ff';   //light blue",
							"        break;",
							"        case 'CreatingState':",
							"        return '#7fffee';   //lighter blue",
							"        break;",
							"        case 'CreatedState':",
							"        return '#47ff2f';   //light green",
							"        break;",
							"        case 'ReservingState':",
							"        return '#dcff2b';   //yellow",
							"        break;",
							"        case 'ReservedState':",
							"        return '#ff9f22';   //orange",
							"        break;",
							"        case 'YieldingState':",
							"        return '#e882c3';   //pink red",
							"        break;",
							"        case 'YieldedState':",
							"        return 'green';     //dark green",
							"        break;",
							"        case 'ErrorState':",
							"        return 'red';",
							"        break;",
							"        default:",
							"        return 'black';",
							"    }",
							"}",
							"",
							"let json = pm.response.json();",
							"for (let i in json.entities) {",
							"    let colorCode = circleColor(json.entities[i].state);",
							"    json.entities[i]._colorCode = colorCode;",
							"};",
							"",
							"pm.visualizer.set(template, {",
							"    response: json",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tree D3.js",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"    <style type=\"text/css\">",
							"        .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"        .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"        .tftable tr {background-color:#ffffff;}",
							"        .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"        .tftable tr:hover {background-color:#e0ffff;}",
							"    </style>",
							"",
							"    <table id=\"tblData\" class=\"tftable\" border=\"1\">",
							"        <tr>",
							"            <th>child name</th>",
							"            <th>state</th>",
							"        </tr>",
							"        ",
							"        {{#each response.children}}",
							"            <tr id=row_{{@key}} onClick=\"handleClick(this.id)\">",
							"                <td id={{@key}}>{{name}}</td>",
							"                <td>{{nodeState}}</td>",
							"            </tr>",
							"        {{/each}}",
							"    </table>",
							"`;",
							"",
							"",
							"pm.visualizer.set(template, {",
							"    response: pm.response.json()",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/tree",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"tree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Kick",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/bike/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"instructions\": {\"version\":\"{{version_uuid}}\", \"location\":\"git@github.com:blueprints/myblueprint.git\"}, \"bom\":{\"version\":\"\", \"location\":\"\"}, \"mechanic\": {\"version\":\"\", \"location\":\"\"}, \"access\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bikeid",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bikeid"
					]
				},
				"description": "Given the blueprint, calculates the entity id."
			},
			"response": []
		},
		{
			"name": "Reserve",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/reserve/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"reserve",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unreserve",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/reserve/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"reserve",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Passivate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/bike/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike",
						"{{bikeId}}"
					]
				},
				"description": "Will remove entity node from the tree."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}