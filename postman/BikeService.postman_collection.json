{
	"info": {
		"_postman_id": "d45e4c90-24ae-4690-a361-b0ac4075f1e2",
		"name": "BikeService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1644939"
	},
	"item": [
		{
			"name": "Create new",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function create_UUID(){",
							"    var dt = new Date().getTime();",
							"    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
							"        var r = (dt + Math.random()*16)%16 | 0;",
							"        dt = Math.floor(dt/16);",
							"        return (c=='x' ? r :(r&0x3|0x8)).toString(16);",
							"    });",
							"    uuid = uuid.substring(0, 8);",
							"    return uuid;",
							"}",
							"",
							"var version_uuid = create_UUID();",
							"postman.setEnvironmentVariable(\"version_uuid\", version_uuid);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"bikeId\", pm.response.text());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"instructions\": {\"version\":\"{{version_uuid}}\", \"location\":\"git@github.com:blueprints/myblueprint.git\"}, \"bom\":{\"version\":\"\", \"location\":\"\"}, \"mechanic\": {\"version\":\"\", \"location\":\"\"}, \"access\":\"\"}"
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike"
					]
				}
			},
			"response": []
		},
		{
			"name": "Restart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"instructions\": {\"version\":\"{{version_uuid}}\", \"location\":\"git@github.com:blueprints/myblueprint.git\"}, \"bom\":{\"version\":\"\", \"location\":\"\"}, \"mechanic\": {\"version\":\"\", \"location\":\"\"}, \"access\":\"\"}"
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike"
					]
				},
				"description": "This is to kick an entity actor that got stuck in its initial state. It is like a regular 'Create new', a POST: it needs a blueprint payload."
			},
			"response": []
		},
		{
			"name": "Get Inventory",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"var array = jsonData.entities;",
							"// array.forEach(e => console.log(e));",
							"for (var i = 0; i < array.length; i++) {",
							"    if(array[i].state === 'InitState') {",
							"        pm.environment.set(\"version_uuid\", array[i].id);",
							"        break;",
							"    } else if(array[i].state.startsWith('ErrorState')) {",
							"        pm.environment.set(\"bikeId\", array[i].id);",
							"    }",
							"}",
							"",
							"//visualizer",
							"var template = `",
							"    <style type=\"text/css\">",
							"        .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"        .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"        .tftable tr {background-color:#ffffff;}",
							"        .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"        .tftable tr:hover {background-color:#e0ffff;}",
							"    </style>",
							"",
							"    <table id=\"tblData\" class=\"tftable\" border=\"1\">",
							"        <tr>",
							"            <th>entity id</th>",
							"            <th>state</th>",
							"        </tr>",
							"        ",
							"        {{#each response.entities}}",
							"            <tr id=row_{{@key}} onClick=\"handleClick(this.id)\">",
							"                <td id={{@key}}>{{id}}</td>",
							"                <td style=\"color:#0000ff\" bgColor=\"{{_colorCode}}\">{{state}}</td>",
							"            </tr>",
							"        {{/each}}",
							"    </table>",
							"`;",
							"",
							"function circleColor(d) {",
							"    switch(d) {",
							"        case 'InitState':",
							"        return 'grey';",
							"        break;",
							"        case 'DownloadingState':",
							"        return '#b091ff';   //violet",
							"        break;",
							"        case 'DownloadedState':",
							"        return '#84c2ff';   //light blue",
							"        break;",
							"        case 'CreatingState':",
							"        return '#7fffee';   //lighter blue",
							"        break;",
							"        case 'CreatedState':",
							"        return '#47ff2f';   //light green",
							"        break;",
							"        case 'ReservingState':",
							"        return '#dcff2b';   //yellow",
							"        break;",
							"        case 'ReservedState':",
							"        return '#ff9f22';   //orange",
							"        break;",
							"        case 'YieldingState':",
							"        return '#e882c3';   //pink red",
							"        break;",
							"        case 'YieldedState':",
							"        return 'green';     //dark green",
							"        break;",
							"        case 'ErrorState':",
							"        return 'red';",
							"        break;",
							"        default:",
							"        return 'black';",
							"    }",
							"}",
							"",
							"let json = pm.response.json();",
							"for (let i in json.entities) {",
							"    let colorCode = circleColor(json.entities[i].state);",
							"    json.entities[i]._colorCode = colorCode;",
							"};",
							"",
							"pm.visualizer.set(template, {",
							"    response: json",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike"
					]
				}
			},
			"response": []
		},
		{
			"name": "READY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:8558/ready",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "8558",
					"path": [
						"ready"
					]
				}
			},
			"response": []
		},
		{
			"name": "CLUSTER MEM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:8558/cluster/members",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "8558",
					"path": [
						"cluster",
						"members"
					]
				},
				"description": "See [Akka Management](https://doc.akka.io/docs/akka-management/current/cluster-http-management.html)"
			},
			"response": []
		},
		{
			"name": "Get Tree D3.js",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"",
							"<!DOCTYPE html>",
							"<meta charset='utf-8'>",
							"<style>",
							"",
							"/* Make the chart container fill the page using CSS. */",
							"#chart {",
							"  position: fixed;",
							"  left: 0px;",
							"  right: 0px;",
							"  top: 0px;",
							"  bottom: 0px;",
							"}",
							"",
							"g {",
							"  width: inherit;",
							"  height: inherit;",
							"}",
							"",
							"path.link {",
							"  fill: none;",
							"  stroke: #2194e3;",
							"  stroke-width: 3px;",
							"}",
							"",
							"text {",
							"  font-family: sans-serif;",
							"  font-size: 12px;",
							"  fill: #999;",
							"}",
							"",
							"</style>",
							"<div id='chart'><svg></svg></div>",
							"<script src=\"https://d3js.org/d3.v5.js\"></script>",
							"<script>",
							"    pm.getData(function (err, value) {",
							"      if (err) console.error(\"Unable to access data in script\", err);",
							"      console.log(\"Fetched data\", value);",
							"      ",
							"",
							"",
							"",
							"",
							"    const chartDiv = document.getElementById('chart');",
							"    const width = chartDiv.clientWidth;",
							"    const height = chartDiv.clientHeight;",
							"    const radius = height / 2;",
							"    const tree = d3.tree().size([2 * Math.PI, radius - 75]);",
							"",
							"    const svg = d3.select('svg')",
							"      .style('width', width)",
							"      .style('height', height)",
							"      .style('padding', '10px')",
							"      .style('box-sizing', 'border-box')",
							"      .style('font', 'sans-serif');",
							"",
							"    const g = svg.append('g')",
							"      .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');",
							"",
							"    const gLink = g.append('g')",
							"      .attr('class', 'links')",
							"      .attr('fill', 'none')",
							"      .attr('stroke', '#555')",
							"      .attr('stroke-opacity', '0.4')",
							"      .attr('stroke-width', 1.5);",
							"",
							"    const gNode = g.append('g')",
							"      .attr('class', 'nodes')",
							"      .attr('stroke-linejoin', 'round')",
							"      .attr('stroke-width', 3);",
							"",
							"    update(value.response);",
							"",
							"    function update(hierarchy) {",
							"      const t1 = d3.transition()",
							"        .duration(75);",
							"",
							"      const t2 = d3.transition()",
							"        .delay(75)",
							"        .duration(75);",
							"",
							"      const t3 = d3.transition()",
							"        .delay(150)",
							"        .duration(75);",
							"",
							"      const root = tree(d3.hierarchy(hierarchy));",
							"",
							"      const link = gLink.selectAll('path')",
							"        .data(root.links(), linkId);",
							"",
							"      const linkEnter = link.enter().append('path')",
							"        .attr('id', d => linkId)",
							"        .attr('class', d => 'link ' + d.source.data.type)",
							"        .style('opacity', 0.000001)",
							"        .attr('d', d3.linkRadial()",
							"                     .angle(d => d.x)",
							"                     .radius(d => d.y));",
							"",
							"      link.transition(t2)",
							"        .style('opacity', 1.0)",
							"        .attr('d', d3.linkRadial()",
							"        .angle(d => d.x)",
							"        .radius(d => d.y));",
							"",
							"      linkEnter.transition(t3)",
							"        .style('opacity', 1.0);",
							"",
							"      link.exit()",
							"        .transition(t1)",
							"        .style('opacity', 0.000001)",
							"        .remove();",
							"",
							"      const node = gNode.selectAll('g')",
							"        .data(root.descendants(), nodeId);",
							"",
							"      const nodeEnter = node.enter().append('g')",
							"        .attr('id', nodeId)",
							"        .attr('stroke', 'black')",
							"        .attr('stroke-width', '0.02%')",
							"        .attr('class', d => 'node ' + d.data.type)",
							"        .attr('transform', d => rot(d))",
							"        .on('mouseover', function() {",
							"          d3.select(this).select('text').style('font-size', 24).style('fill', '#046E97');",
							"        })",
							"        .on('mouseout', function(d) {",
							"          d3.select(this).select('text').style('font-size', 12).style('fill', '#999');",
							"        });",
							"",
							"      nodeEnter.append('circle')",
							"        .attr('class', d => d.data.type)",
							"        .attr('fill', circleColor)",
							"        .attr('r', circleRadius)",
							"        .attr('cursor', nodeCursor)",
							"        .on('click', clickCircle)",
							"        .style('opacity', 0.000001);",
							"",
							"      nodeEnter.append('text')",
							"        .attr('dy', '0.31em')",
							"        .attr('x', labelOffsetX)",
							"        .attr('text-anchor', d => d.x < Math.PI === !d.children ? 'start' : 'end')",
							"        .attr('transform', d => d.x >= Math.PI ? 'rotate(180)' : null)",
							"        .style('opacity', 0.000001)",
							"        .text(mytext);",
							"",
							"      function mytext(d) {",
							"        if(d.data.type == 'entity')",
							"            //return JSON.parse(d.data.name).version.substring(0,6) + \" - \" + d.data.nodeState",
							"            return d.data.name.substring(0,6)",
							"        else return d.data.name",
							"      }",
							"",
							"      nodeEnter.append('title')",
							"        .text(d => d.data.type);",
							"",
							"      node.transition(t2)",
							"        .attr('transform', d => rot(d))",
							"        .select('circle.entity')",
							"          .attr('r', circleRadius)",
							"          .style('fill', d => circleColor(d))",
							"          .style('opacity', 1.0);",
							"",
							"      node.transition(t2)",
							"        .select('text')",
							"          .style('opacity', 1.0);",
							"",
							"      nodeEnter.transition(t3)",
							"        .select('circle')",
							"          .style('opacity', 1.0);",
							"",
							"      nodeEnter.transition(t3)",
							"        .select('text')",
							"          .style('opacity', 1.0);",
							"",
							"      node.exit()",
							"        .transition(t1)",
							"        .select('circle')",
							"          .attr('r', circleRadiusExit)",
							"          .style('opacity', 0.000001)",
							"          .style('fill', 'red');",
							"",
							"      node.exit()",
							"        .transition(t1)",
							"        .select('text')",
							"          .style('opacity', 0.000001);",
							"",
							"      node.exit()",
							"        .transition(t1)",
							"        .remove();",
							"    }",
							"",
							"    function rot(d) {",
							"        let r = d.x * 180 / Math.PI - 90;",
							"        let t = d.y;",
							"      return \"rotate(\"+r+\") translate(\"+t+\",0)\"",
							"    }",
							"",
							"    function linkId(d) {",
							"      return d.source.data.name + '-' + d.target.data.name;",
							"    }",
							"",
							"    function nodeId(d) {",
							"      return d.data.type + '-' + d.data.name;",
							"    }",
							"",
							"    function circleColor(d) {",
							"        if (d.data.type.includes('entity')) {",
							"            switch(d.data.nodeState) {",
							"              case 'InitState':",
							"                return 'grey';",
							"                break;",
							"              case 'DownloadingState':",
							"                return '#b091ff';   //violet",
							"                break;",
							"              case 'DownloadedState':",
							"                return '#84c2ff';   //light blue",
							"                break;",
							"              case 'CreatingState':",
							"                return '#7fffee';   //lighter blue",
							"                break;",
							"              case 'CreatedState':",
							"                return '#47ff2f';   //light green",
							"                break;",
							"              case 'ReservingState':",
							"                return '#dcff2b';   //yellow",
							"                break;",
							"              case 'ReservedState':",
							"                return '#ff9f22';   //orange",
							"                break;",
							"              case 'YieldingState':",
							"                return '#e882c3';   //pink red",
							"                break;",
							"              case 'YieldedState':",
							"                return 'green';     //dark green",
							"                break;",
							"              case 'ErrorState':",
							"                return 'red';",
							"                break;",
							"              default:",
							"                return 'black';",
							"            }",
							"        } else if (d.data.type.includes('shard')) {",
							"            return '#f7932f';",
							"        } else if (d.data.type.includes('singleton')) {",
							"            return '#c4624f';",
							"        } else if (d.data.type.includes('httpServer')) {",
							"            return '#f7f02f';",
							"        } else if (d.data.type.includes('member')) {",
							"            switch(d.data.nodeState) {",
							"              case 'MemberJoined':",
							"                return '#ff9f22'; //red-yellow",
							"                break;",
							"              case 'MemberUp':",
							"                return '#f7cc2f';   //red-yellow",
							"                break;",
							"              case 'MemberWeaklyUp':",
							"                return '#f8a530';   //red-yellow",
							"                break;",
							"              case 'MemberLeft':",
							"                return 'green';",
							"                break;",
							"              case 'MemberExited':",
							"                return 'red';",
							"                break;",
							"              default:",
							"                return 'black';",
							"            }",
							"        } else if (d.data.type.includes('cluster')) {",
							"            return '#f7f72f';",
							"        } else {",
							"            return 'black';",
							"        }",
							"    }",
							"",
							"    function circleRadius(d) {",
							"        if (d.data.type.includes('entity')) {",
							"            return 8;",
							"        } else if (d.data.type.includes('shard')) {",
							"            return 12;",
							"        } else if (d.data.type.includes('member')) {",
							"            return 22;",
							"        } else if (d.data.type.includes('cluster')) {",
							"            return 10;",
							"        } else {",
							"            return 3;",
							"        }",
							"    }",
							"",
							"    function circleRadiusExit(d) {",
							"        return 4 * circleRadius(d);",
							"    }",
							"",
							"    function labelOffsetX(d) {",
							"        if (d.data.type.includes('entity')) {",
							"            return offset(d, 10);",
							"        } else if (d.data.type.includes('shard')) {",
							"            return offset(d, 14);",
							"        } else if (d.data.type.includes('member')) {",
							"            return offset(d, 24);",
							"        } else if (d.data.type.includes('cluster')) {",
							"            return offset(d, 12);",
							"        } else {",
							"            return offset(d, 5);",
							"        }",
							"",
							"        function offset(d, distance) {",
							"            return d.x < Math.PI === !d.children ? distance : -distance;",
							"        }",
							"    }",
							"",
							"    function nodeCursor(d) {",
							"        return d.data.type.indexOf('member') >= 0 ? 'pointer' : 'default';",
							"    }",
							"",
							"    function clickCircle(d) {",
							"        if (d.data.type.indexOf('member') >= 0) {",
							"            console.log(d.data.name);",
							"        } else if (d.data.type.indexOf('entity') >= 0) {",
							"            console.log(d.data.nodeState);",
							"            sendWebSocketRequest(d.data.name);",
							"        }",
							"    }",
							"});",
							"",
							"</script>",
							"`;",
							"console.log(\"hello\");",
							"pm.visualizer.set(template, {",
							"    response: pm.response.json()",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/tree",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"tree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bike/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Kick",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/bike/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"instructions\": {\"version\":\"{{version_uuid}}\", \"location\":\"git@github.com:blueprints/myblueprint.git\"}, \"bom\":{\"version\":\"\", \"location\":\"\"}, \"mechanic\": {\"version\":\"\", \"location\":\"\"}, \"access\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/bikeid",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bikeid"
					]
				},
				"description": "Given the blueprint, calculates the entity id."
			},
			"response": []
		},
		{
			"name": "Reserve",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/reserve/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"reserve",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unreserve",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/reserve/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"reserve",
						"{{bikeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Passivate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/bike/{{bikeId}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"bike",
						"{{bikeId}}"
					]
				},
				"description": "Will remove entity node from the tree."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}